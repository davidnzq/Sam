{"version":3,"file":"popup/index.js","mappings":";;;;;;;;;;;AAAA;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://longport-ai/./src/popup/popup.css?07b2","webpack://longport-ai/webpack/bootstrap","webpack://longport-ai/webpack/runtime/make namespace object","webpack://longport-ai/./src/popup/index.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * LongPort AI 助手 - 弹出窗口脚本\n */\n\nimport './popup.css';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  // 获取设置按钮元素\n  const optionsBtn = document.getElementById('optionsBtn');\n  \n  // 添加点击事件监听器\n  if (optionsBtn) {\n    optionsBtn.addEventListener('click', () => {\n      // 打开选项页\n      chrome.runtime.openOptionsPage();\n    });\n  }\n  \n  // 获取记录按钮元素\n  const recordsBtn = document.getElementById('recordsBtn');\n  \n  // 添加点击事件监听器\n  if (recordsBtn) {\n    recordsBtn.addEventListener('click', () => {\n      // 打开侧边栏面板\n      chrome.sidePanel.open({ tabId: chrome.tabs.TAB_ID_NONE });\n    });\n  }\n  \n  // 获取当前标签页信息\n  chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n    const currentTab = tabs[0];\n    \n    // 这里可以根据当前页面判断是否显示某些功能\n    if (currentTab.url) {\n      // 例如检查是否在 Notion 或 LongPort 平台\n      const isNotionOrLongPort = \n        currentTab.url.includes('notion.so') || \n        currentTab.url.includes('longport.com');\n      \n      // 根据页面类型调整界面\n      if (isNotionOrLongPort) {\n        // 可以在这里添加特定平台的功能\n      }\n    }\n  });\n});\n\n// 导出一个空对象，确保这是一个有效的模块\nexport {};\n"],"names":[],"sourceRoot":""}