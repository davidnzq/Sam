{"version":3,"file":"records/index.js","mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;ACAA;;;;AAIA;AAWA;AACA;AAAA;AACA;AACA;AACA;AAuBA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAbA;AACA;AACA;AAWA;AAEA;;;;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;;;;;;;ACjYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACNA;;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;AACA","sources":["webpack://longport-ai/./src/records/records.css?659f","webpack://longport-ai/./src/utils/record-manager.ts","webpack://longport-ai/webpack/bootstrap","webpack://longport-ai/webpack/runtime/define property getters","webpack://longport-ai/webpack/runtime/hasOwnProperty shorthand","webpack://longport-ai/webpack/runtime/make namespace object","webpack://longport-ai/./src/records/index.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","/**\n * LongPort AI 助手 - 优化记录管理器\n * \n * 用于管理文本优化历史记录，提供记录的保存、查询、删除等功能\n */\n\n// 优化统计信息接口\nexport interface OptimizationStats {\n  originalLength: number;\n  optimizedLength: number;\n  lengthDifference: number;\n  percentageChange: number;\n  processingTime?: number;\n}\n\n// 优化模式枚举\nexport enum OptimizationMode {\n  BASIC = 'basic',\n  STRICT = 'strict'\n}\n\n// 优化记录接口\nexport interface OptimizationRecord {\n  id: string;\n  timestamp: number;\n  sourceUrl: string;\n  sourceDomain: string;\n  originalText: string;\n  optimizedText: string;\n  mode: OptimizationMode;\n  stats: OptimizationStats;\n}\n\n// 记录过滤条件接口\nexport interface RecordFilter {\n  startDate?: number;\n  endDate?: number;\n  domain?: string;\n  searchText?: string;\n  mode?: OptimizationMode;\n}\n\n// 记录管理器类\nclass RecordManager {\n  private static instance: RecordManager;\n  private readonly STORAGE_KEY = 'optimizationRecords';\n  private readonly MAX_RECORDS = 100; // 最大记录数量\n  private readonly DEFAULT_RETENTION_DAYS = 30; // 默认保留天数\n\n  // 单例模式\n  public static getInstance(): RecordManager {\n    if (!RecordManager.instance) {\n      RecordManager.instance = new RecordManager();\n    }\n    return RecordManager.instance;\n  }\n\n  // 私有构造函数\n  private constructor() {}\n\n  /**\n   * 保存优化记录\n   * @param record 要保存的记录（不包含id和timestamp）\n   * @returns 保存后的完整记录\n   */\n  public async saveRecord(record: Omit<OptimizationRecord, 'id' | 'timestamp'>): Promise<OptimizationRecord> {\n    // 获取现有记录\n    const records = await this.getAllRecords();\n    \n    // 创建新记录\n    const newRecord: OptimizationRecord = {\n      ...record,\n      id: this.generateId(),\n      timestamp: Date.now()\n    };\n    \n    // 添加到记录列表\n    records.unshift(newRecord);\n    \n    // 如果记录数量超过最大值，删除最旧的记录\n    if (records.length > this.MAX_RECORDS) {\n      records.splice(this.MAX_RECORDS);\n    }\n    \n    // 保存记录\n    await this.saveAllRecords(records);\n    \n    return newRecord;\n  }\n\n  /**\n   * 获取所有优化记录\n   * @returns 优化记录数组\n   */\n  public async getAllRecords(): Promise<OptimizationRecord[]> {\n    return new Promise((resolve) => {\n      chrome.storage.local.get(this.STORAGE_KEY, (result) => {\n        const records = result[this.STORAGE_KEY] || [];\n        resolve(records);\n      });\n    });\n  }\n\n  /**\n   * 根据ID获取单条记录\n   * @param id 记录ID\n   * @returns 找到的记录，如果不存在则返回null\n   */\n  public async getRecordById(id: string): Promise<OptimizationRecord | null> {\n    const records = await this.getAllRecords();\n    return records.find(record => record.id === id) || null;\n  }\n\n  /**\n   * 根据条件筛选记录\n   * @param filter 筛选条件\n   * @returns 符合条件的记录数组\n   */\n  public async filterRecords(filter: RecordFilter): Promise<OptimizationRecord[]> {\n    const records = await this.getAllRecords();\n    \n    return records.filter(record => {\n      // 按日期范围筛选\n      if (filter.startDate && record.timestamp < filter.startDate) {\n        return false;\n      }\n      if (filter.endDate && record.timestamp > filter.endDate) {\n        return false;\n      }\n      \n      // 按域名筛选\n      if (filter.domain && record.sourceDomain !== filter.domain) {\n        return false;\n      }\n      \n      // 按优化模式筛选\n      if (filter.mode && record.mode !== filter.mode) {\n        return false;\n      }\n      \n      // 按文本内容搜索\n      if (filter.searchText) {\n        const searchLower = filter.searchText.toLowerCase();\n        const originalLower = record.originalText.toLowerCase();\n        const optimizedLower = record.optimizedText.toLowerCase();\n        \n        if (!originalLower.includes(searchLower) && !optimizedLower.includes(searchLower)) {\n          return false;\n        }\n      }\n      \n      return true;\n    });\n  }\n\n  /**\n   * 删除单条记录\n   * @param id 要删除的记录ID\n   * @returns 是否成功删除\n   */\n  public async deleteRecord(id: string): Promise<boolean> {\n    const records = await this.getAllRecords();\n    const initialLength = records.length;\n    \n    const filteredRecords = records.filter(record => record.id !== id);\n    \n    if (filteredRecords.length === initialLength) {\n      // 没有记录被删除\n      return false;\n    }\n    \n    await this.saveAllRecords(filteredRecords);\n    return true;\n  }\n\n  /**\n   * 清空所有记录\n   * @returns 是否成功清空\n   */\n  public async clearAllRecords(): Promise<boolean> {\n    return new Promise((resolve) => {\n      chrome.storage.local.remove(this.STORAGE_KEY, () => {\n        if (chrome.runtime.lastError) {\n          console.error('清空记录失败:', chrome.runtime.lastError);\n          resolve(false);\n        } else {\n          resolve(true);\n        }\n      });\n    });\n  }\n\n  /**\n   * 清理过期记录\n   * @param retentionDays 保留天数，默认为30天\n   * @returns 删除的记录数量\n   */\n  public async cleanupExpiredRecords(retentionDays: number = this.DEFAULT_RETENTION_DAYS): Promise<number> {\n    const records = await this.getAllRecords();\n    const initialLength = records.length;\n    \n    // 计算截止时间戳\n    const cutoffTimestamp = Date.now() - (retentionDays * 24 * 60 * 60 * 1000);\n    \n    // 过滤掉过期记录\n    const filteredRecords = records.filter(record => record.timestamp >= cutoffTimestamp);\n    \n    // 计算删除的记录数量\n    const deletedCount = initialLength - filteredRecords.length;\n    \n    if (deletedCount > 0) {\n      await this.saveAllRecords(filteredRecords);\n    }\n    \n    return deletedCount;\n  }\n\n  /**\n   * 导出记录为JSON字符串\n   * @returns JSON格式的记录数据\n   */\n  public async exportRecords(): Promise<string> {\n    const records = await this.getAllRecords();\n    return JSON.stringify(records, null, 2);\n  }\n\n  /**\n   * 导入记录\n   * @param jsonData JSON格式的记录数据\n   * @param replace 是否替换现有记录，默认为false（合并）\n   * @returns 导入的记录数量\n   */\n  public async importRecords(jsonData: string, replace: boolean = false): Promise<number> {\n    try {\n      const importedRecords = JSON.parse(jsonData) as OptimizationRecord[];\n      \n      if (!Array.isArray(importedRecords)) {\n        throw new Error('导入数据格式错误');\n      }\n      \n      // 验证记录格式\n      for (const record of importedRecords) {\n        if (!this.isValidRecord(record)) {\n          throw new Error('导入数据包含无效记录');\n        }\n      }\n      \n      if (replace) {\n        // 替换现有记录\n        await this.saveAllRecords(importedRecords);\n      } else {\n        // 合并记录\n        const existingRecords = await this.getAllRecords();\n        \n        // 使用Map去重，以ID为键\n        const recordMap = new Map<string, OptimizationRecord>();\n        \n        // 先添加现有记录\n        existingRecords.forEach(record => {\n          recordMap.set(record.id, record);\n        });\n        \n        // 再添加导入记录（如有重复ID则覆盖）\n        importedRecords.forEach(record => {\n          recordMap.set(record.id, record);\n        });\n        \n        // 转换回数组并按时间戳排序\n        const mergedRecords = Array.from(recordMap.values())\n          .sort((a, b) => b.timestamp - a.timestamp);\n        \n        // 如果超过最大记录数，截断\n        const finalRecords = mergedRecords.slice(0, this.MAX_RECORDS);\n        \n        await this.saveAllRecords(finalRecords);\n      }\n      \n      return importedRecords.length;\n    } catch (error) {\n      console.error('导入记录失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 获取记录统计信息\n   * @returns 记录统计信息\n   */\n  public async getRecordStats(): Promise<{\n    totalCount: number;\n    oldestTimestamp: number | null;\n    newestTimestamp: number | null;\n    domainCounts: Record<string, number>;\n    modeCounts: Record<string, number>;\n  }> {\n    const records = await this.getAllRecords();\n    \n    if (records.length === 0) {\n      return {\n        totalCount: 0,\n        oldestTimestamp: null,\n        newestTimestamp: null,\n        domainCounts: {},\n        modeCounts: {}\n      };\n    }\n    \n    // 初始化统计\n    let oldestTimestamp = records[0].timestamp;\n    let newestTimestamp = records[0].timestamp;\n    const domainCounts: Record<string, number> = {};\n    const modeCounts: Record<string, number> = {};\n    \n    // 遍历记录进行统计\n    for (const record of records) {\n      // 更新时间戳\n      if (record.timestamp < oldestTimestamp) {\n        oldestTimestamp = record.timestamp;\n      }\n      if (record.timestamp > newestTimestamp) {\n        newestTimestamp = record.timestamp;\n      }\n      \n      // 统计域名\n      if (domainCounts[record.sourceDomain]) {\n        domainCounts[record.sourceDomain]++;\n      } else {\n        domainCounts[record.sourceDomain] = 1;\n      }\n      \n      // 统计模式\n      if (modeCounts[record.mode]) {\n        modeCounts[record.mode]++;\n      } else {\n        modeCounts[record.mode] = 1;\n      }\n    }\n    \n    return {\n      totalCount: records.length,\n      oldestTimestamp,\n      newestTimestamp,\n      domainCounts,\n      modeCounts\n    };\n  }\n\n  // 私有方法：保存所有记录\n  private async saveAllRecords(records: OptimizationRecord[]): Promise<void> {\n    return new Promise((resolve, reject) => {\n      chrome.storage.local.set({ [this.STORAGE_KEY]: records }, () => {\n        if (chrome.runtime.lastError) {\n          console.error('保存记录失败:', chrome.runtime.lastError);\n          reject(chrome.runtime.lastError);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  // 私有方法：生成唯一ID\n  private generateId(): string {\n    return Date.now().toString(36) + Math.random().toString(36).substring(2, 9);\n  }\n\n  // 私有方法：验证记录格式\n  private isValidRecord(record: any): boolean {\n    return (\n      typeof record === 'object' &&\n      typeof record.id === 'string' &&\n      typeof record.timestamp === 'number' &&\n      typeof record.sourceUrl === 'string' &&\n      typeof record.sourceDomain === 'string' &&\n      typeof record.originalText === 'string' &&\n      typeof record.optimizedText === 'string' &&\n      typeof record.mode === 'string' &&\n      typeof record.stats === 'object' &&\n      typeof record.stats.originalLength === 'number' &&\n      typeof record.stats.optimizedLength === 'number'\n    );\n  }\n}\n\n// 导出单例实例\nexport const recordManager = RecordManager.getInstance();\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * LongPort AI Pro - 优化记录管理页面脚本\n */\n\nimport './records.css';\nimport { recordManager, OptimizationRecord, RecordFilter, OptimizationMode } from '../utils/record-manager';\n\n// DOM 元素引用\nconst recordsCount = document.getElementById('recordsCount') as HTMLElement;\nconst recordsList = document.getElementById('recordsList') as HTMLElement;\nconst emptyState = document.getElementById('emptyState') as HTMLElement;\nconst loadingState = document.getElementById('loadingState') as HTMLElement;\nconst noResults = document.getElementById('noResults') as HTMLElement;\nconst recordDetail = document.getElementById('recordDetail') as HTMLElement;\nconst dialogOverlay = document.getElementById('dialogOverlay') as HTMLElement;\nconst confirmDialog = document.getElementById('confirmDialog') as HTMLElement;\nconst filterMenu = document.getElementById('filterMenu') as HTMLElement;\nconst domainList = document.getElementById('domainList') as HTMLElement;\n\n// 记录详情元素\nconst detailTimestamp = document.getElementById('detailTimestamp') as HTMLElement;\nconst detailDomain = document.getElementById('detailDomain') as HTMLElement;\nconst detailMode = document.getElementById('detailMode') as HTMLElement;\nconst detailOriginalLength = document.getElementById('detailOriginalLength') as HTMLElement;\nconst detailOptimizedLength = document.getElementById('detailOptimizedLength') as HTMLElement;\nconst detailLengthChange = document.getElementById('detailLengthChange') as HTMLElement;\nconst detailOriginalText = document.getElementById('detailOriginalText') as HTMLElement;\nconst detailOptimizedText = document.getElementById('detailOptimizedText') as HTMLElement;\n\n// 当前查看的记录ID\nlet currentRecordId: string | null = null;\n\n// 当前筛选条件\nlet currentFilter: RecordFilter = {};\n\n// 当前确认对话框回调\nlet confirmCallback: (() => void) | null = null;\n\n/**\n * 初始化页面\n */\nasync function initPage(): Promise<void> {\n  try {\n    // 显示加载状态\n    showLoading(true);\n    \n    // 加载记录\n    await loadRecords();\n    \n    // 加载域名列表（用于筛选）\n    await loadDomainList();\n    \n    // 初始化事件监听\n    setupEventListeners();\n    \n    // 隐藏加载状态\n    showLoading(false);\n  } catch (error) {\n    console.error('初始化页面失败:', error);\n    showToast('加载记录失败，请重试', 'error');\n    showLoading(false);\n  }\n}\n\n/**\n * 加载优化记录\n */\nasync function loadRecords(): Promise<void> {\n  try {\n    // 获取记录\n    const records = await recordManager.filterRecords(currentFilter);\n    \n    // 更新记录计数\n    updateRecordsCount(records.length);\n    \n    // 清空记录列表\n    recordsList.innerHTML = '';\n    \n    // 根据记录数量显示不同的视图\n    if (records.length === 0) {\n      // 如果有筛选条件但没有记录，显示\"无结果\"\n      if (Object.keys(currentFilter).length > 0) {\n        showNoResults(true);\n        showEmptyState(false);\n      } else {\n        // 如果没有筛选条件也没有记录，显示\"空状态\"\n        showEmptyState(true);\n        showNoResults(false);\n      }\n    } else {\n      // 有记录，隐藏空状态和无结果\n      showEmptyState(false);\n      showNoResults(false);\n      \n      // 渲染记录列表\n      records.forEach(record => {\n        recordsList.appendChild(createRecordItem(record));\n      });\n    }\n  } catch (error) {\n    console.error('加载记录失败:', error);\n    showToast('加载记录失败，请重试', 'error');\n  }\n}\n\n/**\n * 加载域名列表（用于筛选）\n */\nasync function loadDomainList(): Promise<void> {\n  try {\n    // 获取记录统计\n    const stats = await recordManager.getRecordStats();\n    \n    // 清空域名列表\n    domainList.innerHTML = '';\n    \n    // 如果没有记录，显示提示\n    if (stats.totalCount === 0) {\n      const emptyItem = document.createElement('div');\n      emptyItem.className = 'domain-item';\n      emptyItem.textContent = '暂无记录';\n      domainList.appendChild(emptyItem);\n      return;\n    }\n    \n    // 添加域名选项\n    Object.keys(stats.domainCounts).forEach(domain => {\n      const count = stats.domainCounts[domain];\n      \n      const domainItem = document.createElement('div');\n      domainItem.className = 'domain-item';\n      \n      const checkbox = document.createElement('input');\n      checkbox.type = 'checkbox';\n      checkbox.id = `domain-${domain}`;\n      checkbox.value = domain;\n      checkbox.checked = true;\n      \n      const label = document.createElement('label');\n      label.htmlFor = `domain-${domain}`;\n      label.textContent = `${domain} (${count})`;\n      \n      domainItem.appendChild(checkbox);\n      domainItem.appendChild(label);\n      domainList.appendChild(domainItem);\n    });\n  } catch (error) {\n    console.error('加载域名列表失败:', error);\n  }\n}\n\n/**\n * 创建记录列表项\n */\nfunction createRecordItem(record: OptimizationRecord): HTMLElement {\n  const item = document.createElement('div');\n  item.className = 'record-item';\n  item.dataset.id = record.id;\n  \n  // 格式化时间\n  const date = new Date(record.timestamp);\n  const formattedDate = `${date.getFullYear()}-${padZero(date.getMonth() + 1)}-${padZero(date.getDate())} ${padZero(date.getHours())}:${padZero(date.getMinutes())}`;\n  \n  // 模式标签类名\n  const modeClass = record.mode === OptimizationMode.STRICT ? 'record-mode strict' : 'record-mode';\n  \n  // 文本预览（截取前20个字符）\n  const textPreview = record.originalText.length > 20 \n    ? record.originalText.substring(0, 20) + '...' \n    : record.originalText;\n  \n  // 构建HTML\n  item.innerHTML = `\n    <div class=\"record-header\">\n      <span class=\"record-time\">${formattedDate}</span>\n      <span class=\"${modeClass}\">${record.mode === OptimizationMode.STRICT ? '严格模式' : '基础模式'}</span>\n    </div>\n    <div class=\"record-preview\">${textPreview}</div>\n    <div class=\"record-source\">\n      <span class=\"source-icon\" style=\"background-image: url('https://www.google.com/s2/favicons?domain=${record.sourceDomain}')\"></span>\n      <span>${record.sourceDomain}</span>\n    </div>\n  `;\n  \n  // 添加点击事件\n  item.addEventListener('click', () => {\n    showRecordDetail(record.id);\n  });\n  \n  return item;\n}\n\n/**\n * 显示记录详情\n */\nasync function showRecordDetail(id: string): Promise<void> {\n  try {\n    // 保存当前记录ID\n    currentRecordId = id;\n    \n    // 获取记录\n    const record = await recordManager.getRecordById(id);\n    \n    if (!record) {\n      showToast('记录不存在或已被删除', 'error');\n      return;\n    }\n    \n    // 格式化时间\n    const date = new Date(record.timestamp);\n    const formattedDate = `${date.getFullYear()}-${padZero(date.getMonth() + 1)}-${padZero(date.getDate())} ${padZero(date.getHours())}:${padZero(date.getMinutes())}`;\n    \n    // 更新详情视图\n    detailTimestamp.textContent = formattedDate;\n    detailDomain.textContent = record.sourceDomain;\n    detailMode.textContent = record.mode === OptimizationMode.STRICT ? '严格模式' : '基础模式';\n    \n    // 更新统计信息\n    detailOriginalLength.textContent = record.stats.originalLength.toString();\n    detailOptimizedLength.textContent = record.stats.optimizedLength.toString();\n    \n    // 字数变化\n    const changeAmount = record.stats.lengthDifference;\n    const changeText = changeAmount > 0 ? `+${changeAmount}` : `${changeAmount}`;\n    detailLengthChange.textContent = changeText;\n    detailLengthChange.className = `stat-value ${changeAmount >= 0 ? 'positive' : 'negative'}`;\n    \n    // 更新文本内容\n    detailOriginalText.textContent = record.originalText;\n    detailOptimizedText.textContent = record.optimizedText;\n    \n    // 显示详情视图\n    recordDetail.classList.add('show');\n    \n    // 设置复制和删除按钮事件\n    const copyOriginalBtn = document.getElementById('copyOriginalBtn');\n    if (copyOriginalBtn) {\n      copyOriginalBtn.onclick = () => copyText(record.originalText);\n    }\n    \n    const copyOptimizedBtn = document.getElementById('copyOptimizedBtn');\n    if (copyOptimizedBtn) {\n      copyOptimizedBtn.onclick = () => copyText(record.optimizedText);\n    }\n    \n    const deleteRecordBtn = document.getElementById('deleteRecordBtn');\n    if (deleteRecordBtn) {\n      deleteRecordBtn.onclick = () => showConfirmDialog('删除记录', '确定要删除此记录吗？此操作不可撤销。', deleteCurrentRecord);\n    }\n    \n  } catch (error) {\n    console.error('显示记录详情失败:', error);\n    showToast('加载记录详情失败', 'error');\n  }\n}\n\n/**\n * 删除当前查看的记录\n */\nasync function deleteCurrentRecord(): Promise<void> {\n  if (!currentRecordId) return;\n  \n  try {\n    // 删除记录\n    const success = await recordManager.deleteRecord(currentRecordId);\n    \n    if (success) {\n      // 返回列表视图\n      hideRecordDetail();\n      \n      // 重新加载记录\n      await loadRecords();\n      \n      // 显示成功提示\n      showToast('记录已删除', 'success');\n    } else {\n      showToast('删除记录失败', 'error');\n    }\n  } catch (error) {\n    console.error('删除记录失败:', error);\n    showToast('删除记录失败', 'error');\n  }\n}\n\n/**\n * 清空所有记录\n */\nasync function clearAllRecords(): Promise<void> {\n  try {\n    // 清空记录\n    const success = await recordManager.clearAllRecords();\n    \n    if (success) {\n      // 重新加载记录\n      await loadRecords();\n      \n      // 如果正在查看详情，返回列表视图\n      hideRecordDetail();\n      \n      // 显示成功提示\n      showToast('所有记录已清空', 'success');\n    } else {\n      showToast('清空记录失败', 'error');\n    }\n  } catch (error) {\n    console.error('清空记录失败:', error);\n    showToast('清空记录失败', 'error');\n  }\n}\n\n/**\n * 导出记录为JSON文件\n */\nasync function exportRecords(): Promise<void> {\n  try {\n    // 获取JSON数据\n    const jsonData = await recordManager.exportRecords();\n    \n    // 创建下载链接\n    const blob = new Blob([jsonData], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    \n    // 创建下载链接并模拟点击\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `longport-ai-records-${new Date().toISOString().split('T')[0]}.json`;\n    document.body.appendChild(a);\n    a.click();\n    \n    // 清理\n    setTimeout(() => {\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n    }, 0);\n    \n    // 显示成功提示\n    showToast('记录已导出', 'success');\n  } catch (error) {\n    console.error('导出记录失败:', error);\n    showToast('导出记录失败', 'error');\n  }\n}\n\n/**\n * 应用筛选条件\n */\nasync function applyFilter(): Promise<void> {\n  try {\n    // 构建筛选条件\n    const filter: RecordFilter = {};\n    \n    // 日期范围\n    const startDateInput = document.getElementById('startDate') as HTMLInputElement;\n    const endDateInput = document.getElementById('endDate') as HTMLInputElement;\n    \n    if (startDateInput.value) {\n      filter.startDate = new Date(startDateInput.value).getTime();\n    }\n    \n    if (endDateInput.value) {\n      // 设置为当天结束时间\n      const endDate = new Date(endDateInput.value);\n      endDate.setHours(23, 59, 59, 999);\n      filter.endDate = endDate.getTime();\n    }\n    \n    // 优化模式\n    const filterBasic = document.getElementById('filterBasic') as HTMLInputElement;\n    const filterStrict = document.getElementById('filterStrict') as HTMLInputElement;\n    \n    if (filterBasic.checked && !filterStrict.checked) {\n      filter.mode = OptimizationMode.BASIC;\n    } else if (!filterBasic.checked && filterStrict.checked) {\n      filter.mode = OptimizationMode.STRICT;\n    }\n    // 如果都选中或都未选中，不筛选模式\n    \n    // 域名筛选\n    const selectedDomains: string[] = [];\n    const domainCheckboxes = domainList.querySelectorAll('input[type=\"checkbox\"]');\n    \n    domainCheckboxes.forEach((checkbox: Element) => {\n      const cb = checkbox as HTMLInputElement;\n      if (cb.checked && cb.value) {\n        selectedDomains.push(cb.value);\n      }\n    });\n    \n    // 如果选择了部分域名（不是全部或全不选），添加域名筛选\n    if (selectedDomains.length > 0 && selectedDomains.length < domainCheckboxes.length) {\n      // 由于recordManager.filterRecords只支持单个域名筛选，这里我们需要手动处理多域名\n      // 先获取所有记录，然后在内存中筛选\n      const allRecords = await recordManager.getAllRecords();\n      const filteredRecords = allRecords.filter(record => {\n        // 应用其他筛选条件\n        if (filter.startDate && record.timestamp < filter.startDate) {\n          return false;\n        }\n        if (filter.endDate && record.timestamp > filter.endDate) {\n          return false;\n        }\n        if (filter.mode && record.mode !== filter.mode) {\n          return false;\n        }\n        \n        // 应用域名筛选\n        return selectedDomains.includes(record.sourceDomain);\n      });\n      \n      // 更新记录计数\n      updateRecordsCount(filteredRecords.length);\n      \n      // 清空记录列表\n      recordsList.innerHTML = '';\n      \n      // 根据记录数量显示不同的视图\n      if (filteredRecords.length === 0) {\n        showNoResults(true);\n        showEmptyState(false);\n      } else {\n        showEmptyState(false);\n        showNoResults(false);\n        \n        // 渲染记录列表\n        filteredRecords.forEach(record => {\n          recordsList.appendChild(createRecordItem(record));\n        });\n      }\n      \n      // 隐藏筛选菜单\n      filterMenu.classList.remove('show');\n      \n      return;\n    }\n    \n    // 搜索文本\n    const searchInput = document.getElementById('searchInput') as HTMLInputElement;\n    if (searchInput.value.trim()) {\n      filter.searchText = searchInput.value.trim();\n    }\n    \n    // 保存当前筛选条件\n    currentFilter = filter;\n    \n    // 重新加载记录\n    await loadRecords();\n    \n    // 隐藏筛选菜单\n    filterMenu.classList.remove('show');\n  } catch (error) {\n    console.error('应用筛选失败:', error);\n    showToast('应用筛选失败', 'error');\n  }\n}\n\n/**\n * 重置筛选条件\n */\nasync function resetFilter(): Promise<void> {\n  try {\n    // 重置日期输入\n    const startDateInput = document.getElementById('startDate') as HTMLInputElement;\n    const endDateInput = document.getElementById('endDate') as HTMLInputElement;\n    startDateInput.value = '';\n    endDateInput.value = '';\n    \n    // 重置模式选择\n    const filterBasic = document.getElementById('filterBasic') as HTMLInputElement;\n    const filterStrict = document.getElementById('filterStrict') as HTMLInputElement;\n    filterBasic.checked = true;\n    filterStrict.checked = true;\n    \n    // 重置域名选择\n    const domainCheckboxes = domainList.querySelectorAll('input[type=\"checkbox\"]');\n    domainCheckboxes.forEach((checkbox: Element) => {\n      (checkbox as HTMLInputElement).checked = true;\n    });\n    \n    // 重置搜索输入\n    const searchInput = document.getElementById('searchInput') as HTMLInputElement;\n    searchInput.value = '';\n    \n    // 清空筛选条件\n    currentFilter = {};\n    \n    // 重新加载记录\n    await loadRecords();\n    \n    // 隐藏筛选菜单\n    filterMenu.classList.remove('show');\n  } catch (error) {\n    console.error('重置筛选失败:', error);\n    showToast('重置筛选失败', 'error');\n  }\n}\n\n/**\n * 设置事件监听\n */\nfunction setupEventListeners(): void {\n  // 刷新按钮\n  const refreshBtn = document.getElementById('refreshBtn');\n  if (refreshBtn) {\n    refreshBtn.addEventListener('click', async () => {\n      showLoading(true);\n      await loadRecords();\n      showLoading(false);\n    });\n  }\n  \n  // 导出按钮\n  const exportBtn = document.getElementById('exportBtn');\n  if (exportBtn) {\n    exportBtn.addEventListener('click', exportRecords);\n  }\n  \n  // 清空按钮\n  const clearAllBtn = document.getElementById('clearAllBtn');\n  if (clearAllBtn) {\n    clearAllBtn.addEventListener('click', () => {\n      showConfirmDialog('清空所有记录', '确定要清空所有记录吗？此操作不可撤销。', clearAllRecords);\n    });\n  }\n  \n  // 设置按钮\n  const settingsBtn = document.getElementById('settingsBtn');\n  if (settingsBtn) {\n    settingsBtn.addEventListener('click', () => {\n      chrome.runtime.openOptionsPage();\n    });\n  }\n  \n  // 返回列表按钮\n  const backToListBtn = document.getElementById('backToListBtn');\n  if (backToListBtn) {\n    backToListBtn.addEventListener('click', hideRecordDetail);\n  }\n  \n  // 筛选按钮\n  const filterBtn = document.getElementById('filterBtn');\n  if (filterBtn) {\n    filterBtn.addEventListener('click', () => {\n      filterMenu.classList.toggle('show');\n    });\n  }\n  \n  // 点击其他地方关闭筛选菜单\n  document.addEventListener('click', (event) => {\n    if (filterMenu.classList.contains('show') && \n        !filterMenu.contains(event.target as Node) && \n        !filterBtn?.contains(event.target as Node)) {\n      filterMenu.classList.remove('show');\n    }\n  });\n  \n  // 应用筛选按钮\n  const applyFilterBtn = document.getElementById('applyFilterBtn');\n  if (applyFilterBtn) {\n    applyFilterBtn.addEventListener('click', applyFilter);\n  }\n  \n  // 重置筛选按钮\n  const resetFilterBtn = document.getElementById('resetFilterBtn');\n  if (resetFilterBtn) {\n    resetFilterBtn.addEventListener('click', resetFilter);\n  }\n  \n  // 搜索输入框\n  const searchInput = document.getElementById('searchInput') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.addEventListener('keyup', (event) => {\n      if (event.key === 'Enter') {\n        currentFilter.searchText = searchInput.value.trim();\n        loadRecords();\n      }\n    });\n  }\n  \n  // 确认对话框\n  const closeDialogBtn = document.getElementById('closeDialogBtn');\n  if (closeDialogBtn) {\n    closeDialogBtn.addEventListener('click', hideConfirmDialog);\n  }\n  \n  const cancelDialogBtn = document.getElementById('cancelDialogBtn');\n  if (cancelDialogBtn) {\n    cancelDialogBtn.addEventListener('click', hideConfirmDialog);\n  }\n  \n  const confirmDialogBtn = document.getElementById('confirmDialogBtn');\n  if (confirmDialogBtn) {\n    confirmDialogBtn.addEventListener('click', () => {\n      if (confirmCallback) {\n        confirmCallback();\n        confirmCallback = null;\n      }\n      hideConfirmDialog();\n    });\n  }\n}\n\n/**\n * 更新记录计数显示\n */\nfunction updateRecordsCount(count: number): void {\n  recordsCount.textContent = `${count} 条记录`;\n}\n\n/**\n * 显示/隐藏加载状态\n */\nfunction showLoading(show: boolean): void {\n  if (show) {\n    loadingState.classList.add('show');\n  } else {\n    loadingState.classList.remove('show');\n  }\n}\n\n/**\n * 显示/隐藏空状态\n */\nfunction showEmptyState(show: boolean): void {\n  if (show) {\n    emptyState.style.display = 'flex';\n  } else {\n    emptyState.style.display = 'none';\n  }\n}\n\n/**\n * 显示/隐藏无结果状态\n */\nfunction showNoResults(show: boolean): void {\n  if (show) {\n    noResults.style.display = 'flex';\n  } else {\n    noResults.style.display = 'none';\n  }\n}\n\n/**\n * 隐藏记录详情视图\n */\nfunction hideRecordDetail(): void {\n  recordDetail.classList.remove('show');\n  currentRecordId = null;\n}\n\n/**\n * 显示确认对话框\n */\nfunction showConfirmDialog(title: string, message: string, callback: () => void): void {\n  const dialogTitle = document.getElementById('dialogTitle');\n  const dialogMessage = document.getElementById('dialogMessage');\n  \n  if (dialogTitle) dialogTitle.textContent = title;\n  if (dialogMessage) dialogMessage.textContent = message;\n  \n  confirmCallback = callback;\n  dialogOverlay.classList.add('show');\n}\n\n/**\n * 隐藏确认对话框\n */\nfunction hideConfirmDialog(): void {\n  dialogOverlay.classList.remove('show');\n  confirmCallback = null;\n}\n\n/**\n * 复制文本到剪贴板\n */\nfunction copyText(text: string): void {\n  navigator.clipboard.writeText(text)\n    .then(() => {\n      showToast('已复制到剪贴板', 'success');\n    })\n    .catch(error => {\n      console.error('复制失败:', error);\n      showToast('复制失败', 'error');\n    });\n}\n\n/**\n * 显示通知提示\n */\nfunction showToast(message: string, type: 'success' | 'error'): void {\n  const toast = document.getElementById('toast');\n  const toastMessage = document.getElementById('toastMessage');\n  const toastIcon = document.querySelector('.toast-icon');\n  \n  if (toast && toastMessage && toastIcon) {\n    toastMessage.textContent = message;\n    toastIcon.className = `toast-icon ${type}`;\n    \n    toast.classList.add('show');\n    \n    // 3秒后隐藏\n    setTimeout(() => {\n      toast.classList.remove('show');\n    }, 3000);\n  }\n}\n\n/**\n * 数字补零\n */\nfunction padZero(num: number): string {\n  return num < 10 ? `0${num}` : `${num}`;\n}\n\n// 页面加载完成后初始化\ndocument.addEventListener('DOMContentLoaded', initPage);\n\n// 导出一个空对象，确保这是一个有效的模块\nexport {};\n"],"names":[],"sourceRoot":""}